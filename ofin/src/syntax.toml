# Syntax definitions for Ofin

# IMPORTANT: Do not change the name of this token without updating the relevant code in lexer::mod.rs
[Token.Newline]
matcher = "\r?\n"

[Token.StringLiteral]
matcher = "(\")((?:(?!\")[^\\\\]|(?:\\\\\\\\)*\\\\[^\\\\])*)(\")"
replace_with = "OfinString::new($1)"
extractor = "copy"

[Token.IntLiteral]
matcher = "-?\\d+"
replace_with = "OfinInt::new($1)"
extractor = "copy"

[Token.CharLiteral]
matcher = "'.'"
replace_with = "OfinChar::new($1)"
extractor = "copy"

[Token.EOL]
matcher = ";"
replace_with = "self"

[Token.Comment]
matcher = "((\\/\\*((.|\\n)*)\\*\\/)|\\/\\/.*$)"

[Token.StringDeclaration]
matcher = "string\\s+.+\\s*="
replace_with = "let mut $1: OfinString ="
extractor = "\\s+.+(?==)"

[Token.IntDeclaration]
matcher = "int\\s+.+\\s*="
replace_with = "let mut $1: OfinInt ="
extractor = "\\s+.+(?==)"

[Token.CharDeclaration]
matcher = "char\\s+.+\\s*="
replace_with = "let mut $1: OfinChar ="
extractor = "\\s+.+(?==)"

[Token.FunctionCall]
matcher = ".+\\((.|\\n)*\\)"
replace_with = "self"

# This token should remain at the end of the syntax list to ensure that it has the lowest priority
[Token.Space]
matcher = "\\s+"